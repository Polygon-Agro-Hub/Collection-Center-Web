name: Docker image build and publish
on:
  push:
    tags: ['*']  # This will trigger on any tag
  workflow_dispatch:
    inputs:
      target_env:
        type: choice
        description: Target environment
        default: "development"
        options:
          - production
          - development
      path_to_dockerfile:
        description: Path to the dockerfile
        default: "Dockerfile"
        type: string
      docker_build_dir:
        description: Docker build directory
        default: "."
        type: string
      image_tag:
        description: Tag to apply to images.
        type: string
        default: latest
      aws_region:
        description: Target AWS Region
        default: "ap-southeast-2"
        type: string

jobs:
  docker:
    runs-on: ubuntu-latest

    env:
      ECR_REPO_NAME: "agroworld/aw-collection-center-ui"

    # Add explicit permissions
    permissions:
      id-token: write
      contents: read
      packages: write

    outputs:
      dev_image: ${{ steps.build-and-push-dev.outputs.dev_image }}
      prod_image: ${{ steps.build-and-push-prod.outputs.prod_image }}
      manual_image: ${{ steps.build-and-push-manual.outputs.image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-rmodi
          aws-region: ${{ inputs.aws_region || 'ap-southeast-2' }}

      - name: Set Image Tag
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ inputs.image_tag || 'latest' }}" >> $GITHUB_ENV
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
          registries: |
            ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build and push development image
        id: build-and-push-dev
        if: github.event_name == 'push' && github.ref_type == 'tag'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build "${{ inputs.docker_build_dir || '.' }}" \
            -f "${{ inputs.path_to_dockerfile || 'Dockerfile' }}" \
            --build-arg ENVIRONMENT=development \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-development"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-development"
          echo "dev_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-development" >> $GITHUB_OUTPUT

      - name: Build and push production image
        id: build-and-push-prod
        if: github.event_name == 'push' && github.ref_type == 'tag'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build "${{ inputs.docker_build_dir || '.' }}" \
            -f "${{ inputs.path_to_dockerfile || 'Dockerfile' }}" \
            --build-arg ENVIRONMENT=production \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-production"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-production"
          echo "prod_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-production" >> $GITHUB_OUTPUT

      - name: Build and push manual trigger image
        id: build-and-push-manual
        if: github.event_name == 'workflow_dispatch'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          TARGET_ENV: ${{ inputs.target_env || 'development' }}
        run: |
          docker build "${{ inputs.docker_build_dir || '.' }}" \
            -f "${{ inputs.path_to_dockerfile || 'Dockerfile' }}" \
            --build-arg ENVIRONMENT=$TARGET_ENV \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-$TARGET_ENV"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-$TARGET_ENV"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-$TARGET_ENV" >> $GITHUB_OUTPUT
